@using PrintCompany.ViewModels
@model PrintCompany.ViewModels.OrderViewModel

@{
    ViewData["Title"] = "Edit";
}

@section Styles
    {
    <link href="~/Content/css/datepickSelect2Dropz.min.css" rel="stylesheet" />
    <link href="~/Content/css/datatables.min.css" rel="stylesheet" />
}
<style>

    .nav-tabs > li > a {
        background-color: white;
    }

    .dropzone {
        border: 2px dashed #0087F7;
        border-radius: 5px;
        background: white;
        min-height: 50px;
    }

        .dropzone .dz-message {
            font-weight: 600;
        }

            .dropzone .dz-message .note {
                font-size: 0.8em;
                font-weight: 200;
                display: block;
                margin-top: 1.4rem;
            }

    .control-label {
        text-align: left !important;
    }

    .checkBox {
        margin-left: 15px !important;
    }

    .big-checkbox {
        width: 20px !important;
        height: 20px !important;
    }
</style>

<div class="row">
    <div class="tabs-container">
        <ul class="nav nav-tabs">
            <li class="active"><a aria-expanded="true" href="#home" data-toggle="tab">Order</a></li>
            <li class=""><a aria-expanded="false" href="#profile" data-toggle="tab">Attachments</a></li>
            <li class=""><a aria-expanded="false" href="#customercontacts" data-toggle="tab">Communication</a></li>
        </ul>

        <div class="tab-content">
            <div class="tab-pane active" id="home">
                <div class="panel panel-default" style="margin-bottom:5px;">
                    <div class="panel-body" style="padding: 15px">
                        <form action="/Orders/Edit" method="post" enctype="multipart/form-data" id="orderEditForm">
                            <input type="hidden" name="Id" value="@Model.Id" />
                            @Html.AntiForgeryToken()
                            <div class="row">
                                <div class="form-group col-md-1">
                                    <label for="Name">Order Number</label>
                                    <input type="text" class="form-control" id="OrderNumber" name="OrderNumber" value="@Model.Id" disabled>
                                </div>
                                <div class="form-group col-md-3">
                                    <label for="CustomerId">Customer</label>
                                    <div>
                                        @Html.DropDownListFor(n => n.CustomerId, Enumerable.Empty<SelectListItem>(), new { @id = "txtOptionId" })
                                    </div>
                                </div>
                                <div class="form-group col-md-2">
                                    @Html.LabelFor(x => x.OrderDate)
                                    @Html.EditorFor(x => x.OrderDate, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                                <div class="form-group col-md-2">
                                    @Html.LabelFor(x => x.DueDate)
                                    @Html.EditorFor(x => x.DueDate, new { htmlAttributes = new { @class = "form-control" } })
                                </div>

                            </div>
                            <div class="row">
                                <div class="col-md-2">
                                    <div class="form-group" style="padding-left:0px;">
                                        <label for="InvoiceNumber">Invoice Number</label>
                                        <input type="text" class="form-control" id="InvoiceNumber" name="InvoiceNumber" value="@Model.InvoiceNumber">
                                    </div>
                                </div>
                                <div class="form-group col-md-2">
                                    @Html.LabelFor(x => x.InvoiceDate)
                                    @Html.EditorFor(x => x.InvoiceDate, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                                <div class="form-group col-md-2">
                                    <label for="contactOptionId">Customer Contact Type</label>
                                    <div>
                                        @Html.DropDownListFor(n => n.ContactTypeId, Enumerable.Empty<SelectListItem>(), new { @id = "contactOptionId", @style = "width: 100% !important;" })
                                    </div>
                                </div>

                                <div class="form-group col-md-2">
                                    @Html.LabelFor(x => x.ContactDate)
                                    @Html.EditorFor(x => x.ContactDate, new { htmlAttributes = new { @class = "form-control" } })
                                </div>

                                <div class="col-md-4" style="margin-top:27px">
                                    <a href="/Orders" class="btn btn-primary" style="margin-right:5px; width:75px;">Back</a>
                                    <input type="submit" class="btn btn-success" style="width:75px;" value="Save" />
                                </div>
                            </div>
                            <div class="row">
                                <div class="form-group col-md-1">
                                    @Html.LabelFor(x => x.RelatedOrderExists)
                                    @Html.EditorFor(x => x.RelatedOrderExists, new { htmlAttributes = new { @class = "form-control big-checkbox" } })
                                </div>
                                <div class="form-group col-md-3">
                                    <label for="Name">Related Orders</label>
                                    <input type="text" class="form-control" id="RelatedOrderNote" name="RelatedOrderNote" value="@Model.RelatedOrderNote">
                                </div>
                                <div class="form-group col-md-2">
                                    @Html.LabelFor(x => x.ColectionDate)
                                    @Html.EditorFor(x => x.ColectionDate, new { htmlAttributes = new { @class = "form-control" } })
                                </div>
                                <div class="form-group col-md-6">
                                    <label for="Name">CollectionNote</label>
                                    <input type="text" class="form-control" id="CollectionNote" name="CollectionNote" value="@Model.CollectionNote">
                                </div>
                            </div>
                        </form>
                    </div>
                </div>

                <div class="panel panel-default">
                    <div class="panel-heading clearfix">
                        <h3 class="panel-title">Order Items</h3>
                        <button onclick="modal1Show()" type="button" class="btn btn-link" style="padding: 0; margin-left: 15px;" data-order-id="@Model.Id">Add Item</button>
                    </div>
                    <div id="OrderLinesByOrderId">
                        @await Html.PartialAsync("_OrderLinesByOrderId", Model.orderLineViewModels)
                    </div>
                </div>
            </div>

            <div class="tab-pane" id="profile">
                <div class="panel-body" style="padding: 20px 5px">
                    <form action="/FileUploads/Upload" id="dropzoneForm" method="post" class="dropzone dz-clickable" enctype="multipart/form-data">
                        <input type="hidden" name="Id" value="@Model.Id" />
                        @Html.AntiForgeryToken()
                        <div class="dropzone-previews"></div>
                        <div class="dz-message"><span>Drop files here to upload (or click here)</span></div>
                    </form>
                    <div class="col-md-5">@await Html.PartialAsync("_PartialFileAttachmentList", Model.FileUploads)</div>
                    <div class="col-md-6">
                        <img id="preview" src='' height="200" />
                    </div>
                </div>
            </div>
            <div class="tab-pane" id="customercontacts">
                <div class="panel-body" style="padding: 20px 5px">
                    <div class="panel panel-default">
                        <div class="panel-heading clearfix">
                            <h3 class="panel-title">Customer Communications</h3>
                            <button onclick="modal_communicationShow()" type="button" class="btn btn-link" style="padding: 0; margin-left: 15px;" data-order-id="@Model.Id">Add Communication</button>
                        </div>
                        <div id="OrderLinesByOrderId">
                            @await Html.PartialAsync("_OrderCustomerContactsByOrderId", Model.orderCustomerContactViewModels)
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@await Html.PartialAsync("_PartialModalOrderLine", new OrderLineViewModel { OrderId = Model.Id })   @*render add orderline modal here*@
<div id="editOrderLinePartial"></div>                                                               @*will render edit orderline modal here*@

@await Html.PartialAsync("_PartialOrderCommunicationAdd", new OrderCustomerContactViewModel { OrderId = Model.Id })    @*render add communication modal here*@
<div id="editOrderLinePartial"></div>                                                                                  @*will render edit communication modal here*@



@section Scripts
    {
    <script src="~/Scripts/datepickSelect2Dropz.min.js"></script>
}

@section Scripts2 {

    <script>

        function previewFile(fileName) {
            $("#preview").attr("src", '@Url.Content("~/Content/Uploads/")' + fileName)
        }

        function RequiredChecked(el) {
            var elType = (el.id.indexOf('Edit') !== -1) ? 'Edit' : 'Add';
            var jobType = el.id.substr(0, el.id.indexOf('Required'));  // Print / Embroidery
            var hideCheckClass = '.' + jobType + 'Quantity' + elType;
            var hideCheckId = '#' + jobType + 'Quantity' + elType;
            var hideCheckTotalId = '#' + jobType + 'TotalQuantity' + elType;
            var hideCheckQuantityId = '#' + 'Quantity' + elType;

            if (el.checked) {
                if ($(hideCheckId).val() == 0)
                    $(hideCheckId).val(1);
                $(hideCheckTotalId).val($(hideCheckQuantityId).val() * $(hideCheckId).val());
                $(hideCheckClass).show();
            }
            else {
                $(hideCheckId).val(0);
                $(hideCheckTotalId).val($(hideCheckQuantityId).val() * $(hideCheckId).val());
                $(hideCheckClass).hide();
            }
    }

        function maxPrint() {
                  $("#PrintCompletedQuantity").val($('#QuantityEdit').val() * $('#PrintQuantityEdit').val());
        }


        function maxEmbrodiery() {
                    $("#EmbroideryCompletedQuantity").val($('#QuantityEdit').val() * $('#EmbroideryQuantityEdit').val());
    }

    function modal1Show() {
        $('#PrintQuantityAdd').val(0);
        $('#EmbroideryQuantityAdd').val(0);
        $('#modal-1').modal('show');
    }

    function modal_communicationShow() {        
        $('#modal_communication').modal('show');
    }

   
    </script>

    <script>

    $(document).ready(function () {

        $(".keyupCheck").keyup(function () {
            $('#PrintTotalQuantityAdd').val($('#QuantityAdd').val() * $('#PrintQuantityAdd').val());
            $('#EmbroideryTotalQuantityAdd').val($('#QuantityAdd').val() * $('#EmbroideryQuantityAdd').val());
        });

            Dropzone.options.dropzoneForm = {
                init: function () {
                    var myDropzone = this;
                    myDropzone.on("complete", function () {
                        if (this.getUploadingFiles().length === 0 && this.getQueuedFiles().length === 0) {
                            setTimeout(function () {
                                myDropzone.removeAllFiles();
                            }, 2500);
                            $("#FileAttachmentsList").load("@("/Orders/ReturnFileListByOrderId/" + Model.Id)");
                        }
                    });
                }
            };


        function initializeSelect2(selectElementObj, listUrl, getSelectedUrl ) {
            selectElementObj.select2({
            ajax: {
                    url: listUrl,
                    dataTYpe: "json",
                    data: function (params) {
                        return {
                            searchTerm: params.term
                        };
                    },
                    processResults: function (data, params) {
                        return {
                            results: data
                        };
                    }
                }
            });

            $.ajax({
                type: 'GET',
                url: getSelectedUrl
            }).then(function (data) {
                var option = new Option(data.text, data.id, true, true);
                selectElementObj.append(option).trigger('change');
                selectElementObj.trigger({
                    type: 'select2:select',
                    params: {
                        data: data
                    }
                });
                });
        }

        function initializeSelect2_2(placeHolder, selectElementObj, listUrl ) {
            selectElementObj.select2({
            placeholder: placeHolder,
            ajax: {
                url: listUrl,
                dataTYpe: "json",
                data: function (params) {
                    return {
                        searchTerm: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data
                    };
                }
            }
            });
        }

        //select2 in order
        initializeSelect2($("#txtOptionId"), "/Customers/GetCustomerList", '/Customers/GetCustomer/' + '@Model.CustomerId');
        initializeSelect2($("#contactOptionId"), "/Admin/ContactTypes/GetContactTypeList" , '/Admin/ContactTypes/GetContactType/' + '@Model.ContactTypeId');

        //select2 in orderline
        initializeSelect2_2("Type", $("#ItemTypeId"), "/OrderLines/GetItemList");
        initializeSelect2_2("Color", $("#ItemColorId"), "/OrderLines/GetColorList");
        initializeSelect2_2("Size",  $("#ItemSizeId"), "/OrderLines/GetSizeList");
        initializeSelect2_2("Supplier", $("#SupplierId"), "/OrderLines/GetSuppliersList");

        //select2 in ordercustomercontact
        initializeSelect2_2("Contact Type", $("#ContactTypeId"), "/OrderCommunication/GetContactTypeList");


        $('.modal').on('hide.bs.modal', function () {
            $('.select2').val([]).trigger('change');
            $('.select2clear').val(null).trigger('change');
            $('.select2clear').html('');
            $("#PrintQuantityAdd").val('');
            $("#EmbroideryQuantityAdd").val('');
            $('.modalForm').find("*").removeClass('has-error');
            $('.modalForm').find("input[type=checkbox], input[type=radio]")
                .prop("checked", "");

            $(this).find('form').trigger('reset');
            $('.PrintQuantityAdd').hide();
            $('.EmbroideryQuantityAdd').hide();
            $("#PrintQuantityAdd").val('');
            $("#EmbroideryQuantityAdd").val('');
        });

        }); //----Document Ready Close

    </script>

    <script>

        function fillOrderLineEditinfo(id, jobType) {

            $("#editOrderLinePartial").load("/OrderLines/Edit/" + id, function (data) {

                RequiredChecked($(this).find('#PrintRequiredEdit')[0]);
                RequiredChecked($(this).find('#EmbroideryRequiredEdit')[0]);

            $("#PrintQuantityEdit,#EmbroideryQuantityEdit,#QuantityEdit").keyup(function () {
                $('#PrintTotalQuantityEdit').val($('#QuantityEdit').val() * $('#PrintQuantityEdit').val());
                $('#EmbroideryTotalQuantityEdit').val($('#QuantityEdit').val() * $('#EmbroideryQuantityEdit').val());
            });


            function initializeSelect2_3(placeHolder, selectElementObj, listUrl, itemIdObj, itemValueObj ) {
                selectElementObj.select2({
                    placeholder: placeHolder,
                    ajax: {
                        url: listUrl,
                        dataTYpe: "json",
                        data: function (params) {
                            return {
                                searchTerm: params.term
                            };
                        },
                        processResults: function (data, params) {
                            return {
                                results: data
                            };
                        }
                    }
            });
                var currentValue = itemIdObj.val();   //ID
                var typeType = itemValueObj.val();     //Text
                var option = new Option(typeType, currentValue, true, true);
                selectElementObj.append(option).trigger('change');
                selectElementObj.trigger({
                    type: 'select2:select'
                });

            }
                initializeSelect2_3("Type", $("#itemTypeEdit"), "/OrderLines/GetItemList", $('#ItemTypeTypeId'), $('#ItemTypeType'));
                initializeSelect2_3("Color", $("#itemColorEdit"), "/OrderLines/GetColorList", $('#ItemColorColorId'), $('#ItemColorColor'));
                initializeSelect2_3("Size", $("#itemSizeEdit"), "/OrderLines/GetSizeList", $('#ItemSizeSizeID'), $('#ItemSizeSize'));
                initializeSelect2_3("Supplier", $("#supplierEdit"), "/OrderLines/GetSuppliersList", $('#SupplierSupplierID'), $('#SupplierSupplier'));

                //OrderLine Form Submit
                $("#formPost").submit(function (e) {
                    e.preventDefault();
                    $.ajax({
                        type: "POST",
                        url: "/OrderLines/Edit",
                        data: $(this).serialize(),
                        success: function () {
                            $('#modal-2').modal('hide');
                            $("#OrderLinesByOrderId").load("@("/Orders/GetOrderLinesForOrderIdPartial/" + Model.Id)");
                        }
                    })
                });

                $('#modal-2').modal('show');

                focusElement = '#' + jobType + 'CompletedQuantity';

                $('#modal-2').on('shown.bs.modal', function () {
                    $(focusElement).focus();
                });
            }); /*$("#editOrderLinePartial").load("/OrderLines/Edit/" + id, function () {   */
        };

        function checkDelete() {
            var result = confirm("Do you want to delete the record");
            if (result) {
                return true;
            }
            return false;
        };

        function checkDeleteFile(id) {
            var result = confirm("Do you want to delete the record");
            if (result) {
                $.get("/FileUploads/Delete/" + id, function () {
                    $("#preview").attr("src", '');
                    $("#FileAttachmentsList").load("@("/Orders/ReturnFileListByOrderId/" + Model.Id)");
                })
                 .fail(function () {
                     alert("File not found");
                     $("#preview").attr("src", '');
                     $("#FileAttachmentsList").load("@("/Orders/ReturnFileListByOrderId/" + Model.Id)");
                });
            }
            return false;
        }

        function checkDeleteOrderLine(id) {
            var result = confirm("Do you want to delete the record");
            if (result) {
                $.get("/OrderLines/Delete/" + id, function () {
                   $("#OrderLinesByOrderId").load("@("/Orders/GetOrderLinesForOrderIdPartial/" + Model.Id)");
                })
                 .fail(function () {
                     alert("File not found");
                    $("#OrderLinesByOrderId").load("@("/Orders/GetOrderLinesForOrderIdPartial/" + Model.Id)");
                });
            }
            return false;
        }
    </script>
}