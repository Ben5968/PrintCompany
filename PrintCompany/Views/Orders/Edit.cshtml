@using PrintCompany.ViewModels
@model PrintCompany.ViewModels.OrderViewModel

@{
    ViewData["Title"] = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .select2 {
        width: 100% !important;
    }

    .nav-tabs > li > a {
        background-color: white;
    }

    .dropzone {
        border: 2px dashed #0087F7;
        border-radius: 5px;
        background: white;
        min-height: 50px;
    }

        .dropzone .dz-message {
            font-weight: 600;
        }

            .dropzone .dz-message .note {
                font-size: 0.8em;
                font-weight: 200;
                display: block;
                margin-top: 1.4rem;
            }
</style>

<div class="row">
    <div class="tabs-container">
        <ul class="nav nav-tabs">
            <li class="active"><a aria-expanded="true" href="#home" data-toggle="tab">Order</a></li>
            <li class=""><a aria-expanded="false" href="#profile" data-toggle="tab">Attachments</a></li>
        </ul>

        <div class="tab-content">
            <div class="tab-pane active" id="home">
                <div class="panel panel-default" style="margin-bottom:5px;">
                    @*<div class="panel-heading clearfix">
                            <h3 class="panel-title">Order Details</h3>
                        </div>*@
                    <div class="panel-body" style="padding: 15px">
                        <form action="/Orders/Edit" method="post" enctype="multipart/form-data">
                            <input type="hidden" name="Id" value="@Model.Id" />
                            @Html.AntiForgeryToken()
                            <div class="row">
                                <div class="form-group col-md-2">
                                    <label for="Name">Order Number</label>
                                    <input type="text" class="form-control" id="OrderNumber" name="OrderNumber" value="@Model.Id" disabled>
                                </div>
                                <div class="form-group col-md-4">
                                    <label for="CustomerId">Customer</label>
                                    <div>
                                        @Html.DropDownListFor(n => n.CustomerId, Enumerable.Empty<SelectListItem>(), new { @id = "txtOptionId", @style = "width:500px;" })
                                        @*@Html.ValidationMessageFor(n => n.CustomerId)*@
                                        @*<select id="CustomerSelect" class="Customer select2 form-control select2-hidden-accessible" style="width:500px;" name="CustomerId">
                                            </select>*@
                                    </div>
                                </div>
                                <div class="form-group col-md-2">
                                    <label for="OrderDate">Order Date</label>
                                    <div id="OrderDate" class="input-group date date-popup">
                                        <input type="text" class="form-control" name="OrderDate" value="@Model.OrderDate.ToString("dd/MM/yyyy")">
                                        <span class="input-group-addon"><i class="fa fa-calendar"></i></span>
                                    </div>
                                </div>
                                <div class="form-group col-md-2">
                                    <label for="DueDate">Due Date</label>
                                    <div id="DueDate" class="input-group date date-popup">
                                        @*<input type="text" class="form-control" name="DueDate" value="@(Model.DueDate.HasValue ? Model.DueDate.Value.ToString("dd/MM/yyyy") : "")">*@
                                        <input type="text" class="form-control" name="DueDate" value="@string.Format("{0:dd/MM/yyyy}", Model.DueDate)">
                                        <span class="input-group-addon"><i class="fa fa-calendar"></i></span>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="form-group" style="padding-left:0px;">
                                        <label for="InvoiceNumber">Invoice Number</label>
                                        <input type="text" class="form-control" id="InvoiceNumber" name="InvoiceNumber" value="@Model.InvoiceNumber">
                                    </div>
                                </div>
                                <div class="form-group col-md-2">
                                    <label for="InvoiceDate">Invoice Date</label>
                                    <div id="InvoiceDate" class="input-group date date-popup">
                                        <input type="text" class="form-control" name="InvoiceDate" value="@string.Format("{0:dd/MM/yyyy}", Model.InvoiceDate)">
                                        <span class="input-group-addon"><i class="fa fa-calendar"></i></span>
                                    </div>
                                </div>
                                <div class="col-md-4" style="margin-top:27px">
                                    <a href="/Orders" class="btn btn-primary" style="margin-right:5px; width:75px;">Back</a>
                                    <input type="submit" class="btn btn-success" style="width:75px;" value="Save" />
                                </div>
                            </div>
                        </form>
                    </div>
                </div>

                <div class="panel panel-default">
                    <div class="panel-heading clearfix">
                        <h3 class="panel-title">Order Items</h3>
                        <button type="button" class="btn btn-link" style="padding: 0; margin-left: 15px;" data-toggle="modal" data-target="#modal-1" data-order-id="@Model.Id">Add Item</button>
                    </div>
                    <div id="OrderLinesByOrderId">
                        @await Html.PartialAsync("_OrderLinesByOrderId", Model.orderLineViewModels)
                    </div>
                </div>
            </div>

            <div class="tab-pane" id="profile">
                <div class="panel-body" style="padding: 20px 5px">
                    <form action="/FileUploads/Upload" id="dropzoneForm" method="post" class="dropzone dz-clickable" enctype="multipart/form-data">
                        <input type="hidden" name="Id" value="@Model.Id" />
                        @Html.AntiForgeryToken()
                        <div class="dropzone-previews"></div>
                        <div class="dz-message"><span>Drop files here to upload (or click here)</span></div>
                    </form>
                    <div class="col-md-5">@await Html.PartialAsync("_PartialFileAttachmentList", Model.FileUploads)</div>
                    <div class="col-md-6">
                        <img id="preview" src='' height="200" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@await Html.PartialAsync("_PartialModalOrderLine", new OrderLineViewModel { OrderId = Model.Id })
<div id="editOrderLinePartial"></div>

@section Scripts
    {
    <script>

        function previewFile(fileName) {
            $("#preview").attr("src", '@Url.Content("~/Content/Uploads/")' + fileName)
        }

        function RequiredChecked(enableState, print) {
            var idToCheck = '#' + print + 'CompletedQuantity';
            var enableState = enableState.toString().toLowerCase();
            var enableState = (enableState == 'true');
            $(idToCheck).prop('disabled', !enableState);
            if (!enableState) {
                $(idToCheck).val('');
            }
        }

        function maxEmbrodiery() {
            console.log($("#Quantity"));
            $("#EmbroideryCompletedQuantity").val(500)
        }
        
    </script>

    <script>
        //var maxEmbrodiery; 
        $(document).ready(function () {

            Dropzone.options.dropzoneForm = {
                init: function () {
                    var myDropzone = this;
                    myDropzone.on("complete", function (file) {
                        if (this.getUploadingFiles().length === 0 && this.getQueuedFiles().length === 0) {
                            setTimeout(function () {
                                myDropzone.removeAllFiles();
                            }, 2500);
                            $("#FileAttachmentsList").load("@("/Orders/ReturnFileListByOrderId/" + Model.Id)");
                        }
                    });
                }
            };

            $('.date-popup').datepicker({
                autoclose: true,
                todayBtn: true,
                format: "dd/mm/yyyy",
                enableOnReadonly: false,
                keyboardNavigation: false,
                forceParse: false,
                todayHighlight: true
            });
            $("#txtOptionId").select2({
                ajax: {
                    url: "/Customers/GetCustomerList",
                    dataTYpe: "json",
                    data: function (params) {
                        return {
                            searchTerm: params.term
                        };
                    },
                    processResults: function (data, params) {
                        return {
                            results: data
                        };
                    }
                }
            });
            // Fetch the preselected item, and add to the control
            var customerSelect = $('#txtOptionId');
            $.ajax({
                type: 'GET',
                url: '/Customers/GetCustomer/' + '@Model.CustomerId'
            }).then(function (data) {
                // create the option and append to Select2
                var option = new Option(data.text, data.id, true, true);
                customerSelect.append(option).trigger('change');
                // manually trigger the `select2:select` event
                customerSelect.trigger({
                    type: 'select2:select',
                    params: {
                        data: data
                    }
                });
                });

        $("#ItemTypeId").select2({
            placeholder: "Type",
            ajax: {
                url: "/OrderLines/GetItemList",
                dataTYpe: "json",
                data: function (params) {
                    return {
                        searchTerm: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data
                    };
                }
            }
        });
        $("#ItemColorId").select2({
            placeholder: "Color",
            ajax: {
                url: "/OrderLines/GetColorList",
                dataTYpe: "json",
                data: function (params) {
                    return {
                        searchTerm: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data
                    };
                }
            }
        });
        $("#ItemSizeId").select2({
            placeholder: "Size",
            ajax: {
                url: "/OrderLines/GetSizeList",
                dataTYpe: "json",
                data: function (params) {
                    return {
                        searchTerm: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data
                    };
                }
            }
        });
        $("#SupplierId").select2({
            placeholder: "Supplier",
            ajax: {
                url: "/OrderLines/GetSuppliersList",
                dataTYpe: "json",
                data: function (params) {
                    return {
                        searchTerm: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data
                    };
                }
            }
        });
        //$('.dataTables-orderLines').DataTable({
        //    dom: '<"html5buttons" B>ftlp',
        //    buttons: [
        //        //{
        //        //    extend: 'copyHtml5',
        //        //    exportOptions: {
        //        //        columns: [0, ':visible']
        //        //    }
        //        //},
        //        {
        //            extend: 'excelHtml5',
        //            exportOptions: {
        //                columns: ':visible'
        //            }
        //        },
        //        {
        //            extend: 'pdfHtml5',
        //            exportOptions: {
        //                columns: [0, 1, 2, 3, 4, 5, 6, 7, 8 ]
        //            }
        //        },
        //        'colvis'
        //    ],
        //    columnDefs: [
        //        { width: '8%', targets: 0 },
        //        { width: '10%', targets: 1 },
        //        { width: '10%', targets: 2 },
        //        { width: '7%', targets: 3 },
        //        { width: '9%', targets: 4 },
        //        { width: '9%', targets: 5 },
        //        { width: '9%', targets: 6 },
        //        { width: '9%', targets: 7 },
        //        { width: '9%', targets: 8 },
        //    ]
        //});

        }); //----Document Ready Close

    </script>

    <script>
        function fillOrderLineEditinfo(id, jobType) {
           
            $("#editOrderLinePartial").load("/OrderLines/Edit/" + id, function (data) {

                maxEmbrodiery = function () {                    
                    $("#EmbroideryCompletedQuantity").val($(data).find('#Quantity').val());
                };

                maxPrint = function () {
                    $("#PrintCompletedQuantity").val($(data).find('#Quantity').val());
                };

                //RequiredChecked(($("#PrintRequiredChekboxValue").val()), 'Print');
                //RequiredChecked(($("#EmbroideryRequiredChekboxValue").val()), 'Embroidery');

                RequiredChecked(($(this).find('#PrintRequired')[0].checked), 'Print');
                RequiredChecked(($(this).find('#EmbroideryRequired')[0].checked), 'Embroidery');

                //Fill ItemType
                $("#itemTypeEdit").select2({
                    placeholder: "Type",
                    ajax: {
                        url: "/OrderLines/GetItemList",
                        dataTYpe: "json",
                        data: function (params) {
                            return {
                                searchTerm: params.term
                            };
                        },
                        processResults: function (data, params) {
                            return {
                                results: data
                            };
                        }
                    }
                });
                var itemTypeSelect = $('#itemTypeEdit');
                var itemTypeCurrentValue = $('#ItemTypeTypeId').val();   //ID
                var ItemTypeType = $('#ItemTypeType').val();     //Text
                var option = new Option(ItemTypeType, itemTypeCurrentValue, true, true);
                itemTypeSelect.append(option).trigger('change');
                itemTypeSelect.trigger({
                    type: 'select2:select'
                });

                //Fill ItemColor
                $("#itemColorEdit").select2({
                    placeholder: "Type",
                    ajax: {
                        url: "/OrderLines/GetColorList",
                        dataTYpe: "json",
                        data: function (params) {
                            return {
                                searchTerm: params.term
                            };
                        },
                        processResults: function (data, params) {
                            return {
                                results: data
                            };
                        }
                    }
                });
                var itemTypeSelect = $('#itemColorEdit');
                var itemTypeCurrentValue = $('#ItemColorColorId').val();   //ID
                var ItemTypeType = $('#ItemColorColor').val();     //Text
                var option = new Option(ItemTypeType, itemTypeCurrentValue, true, true);
                itemTypeSelect.append(option).trigger('change');
                itemTypeSelect.trigger({
                    type: 'select2:select'
                    //params: {
                    //    data: { "id": ItemTypeType, "text": itemTypeCurrentValue }
                    //}
                });

                //Fill ItemSize
                $("#itemSizeEdit").select2({
                    placeholder: "Type",
                    ajax: {
                        url: "/OrderLines/GetSizeList",
                        dataTYpe: "json",
                        data: function (params) {
                            return {
                                searchTerm: params.term
                            };
                        },
                        processResults: function (data, params) {
                            return {
                                results: data
                            };
                        }
                    }
                });
                var itemTypeSelect = $('#itemSizeEdit');
                var itemTypeCurrentValue = $('#ItemSizeSizeID').val();   //ID
                var ItemTypeType = $('#ItemSizeSize').val();     //Text
                var option = new Option(ItemTypeType, itemTypeCurrentValue, true, true);
                itemTypeSelect.append(option).trigger('change');
                itemTypeSelect.trigger({
                    type: 'select2:select'
                });

                //Fill Supplier
                $("#supplierEdit").select2({
                    placeholder: "Supplier",
                    ajax: {
                        url: "/OrderLines/GetSuppliersList",
                        dataTYpe: "json",
                        data: function (params) {
                            return {
                                searchTerm: params.term
                            };
                        },
                        processResults: function (data, params) {
                            return {
                                results: data
                            };
                        }
                    }
                });
                var itemTypeSelect = $('#supplierEdit');
                var itemTypeCurrentValue = $('#SupplierSupplierID').val();   //ID
                var ItemTypeType = $('#SupplierSupplier').val();     //Text
                var option = new Option(ItemTypeType, itemTypeCurrentValue, true, true);
                itemTypeSelect.append(option).trigger('change');
                itemTypeSelect.trigger({
                    type: 'select2:select'
                });

                //OrderLine Form Submit
                $("#formPost").submit(function (e) {
                    e.preventDefault();
                    $.ajax({
                        type: "POST",
                        url: "/OrderLines/Edit",
                        data: $(this).serialize(),
                        success: function () {
                            $('#modal-2').modal('hide');
                            $("#OrderLinesByOrderId").load("@("/Orders/GetOrderLinesForOrderIdPartial/" + Model.Id)");
                        }
                    })
                });

                $('#modal-2').modal('show');               

                focusElement = '#' + jobType + 'CompletedQuantity';

                $('#modal-2').on('shown.bs.modal', function () {
                    $(focusElement).focus();
                });

                //console.log($(this).find('#EmbroideryCompletedQuantity')[0]);
                //$(this).find('#EmbroideryCompletedQuantity')[0].focus();

                //jobType

            }); /*$("#editOrderLinePartial").load("/OrderLines/Edit/" + id, function () {   */

        };

        function checkDelete() {
            var result = confirm("Do you want to delete the record");
            if (result) {
                return true;
            }
            return false;
        };

        function checkDeleteFile(id) {
            var result = confirm("Do you want to delete the record");
            if (result) {
                $.get("/FileUploads/Delete/" + id, function () {
                    $("#preview").attr("src", '');
                    $("#FileAttachmentsList").load("@("/Orders/ReturnFileListByOrderId/" + Model.Id)");
                })
                 .fail(function () {
                     alert("File not found");
                     $("#preview").attr("src", '');
                     $("#FileAttachmentsList").load("@("/Orders/ReturnFileListByOrderId/" + Model.Id)");
                });
            }
            return false;
        }

        function checkDeleteOrderLine(id) {
            var result = confirm("Do you want to delete the record");
            if (result) {
                $.get("/OrderLines/Delete/" + id, function () {
                   $("#OrderLinesByOrderId").load("@("/Orders/GetOrderLinesForOrderIdPartial/" + Model.Id)");
                })
                 .fail(function () {
                     alert("File not found");
                    $("#OrderLinesByOrderId").load("@("/Orders/GetOrderLinesForOrderIdPartial/" + Model.Id)");
                });
            }
            return false;

        }

    </script>

}
